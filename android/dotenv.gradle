import java.util.regex.Matcher
import java.util.regex.Pattern

def getCurrentFlavor() {
    Gradle gradle = getGradle()

    // match optional modules followed by the task
    // (?:.*:)* is a non-capturing group to skip any :foo:bar: if they exist
    // *[a-z]+([A-Za-z]+) will capture the flavor part of the task name onward (e.g., assembleRelease --> Release)
    def pattern = Pattern.compile("(?:.*:)*[a-z]+([A-Z][A-Za-z]+)")
    def flavor = ""

    gradle.getStartParameter().getTaskNames().any { name ->
        Matcher matcher = pattern.matcher(name)
        if (matcher.find()) {
            flavor = matcher.group(1).toLowerCase()
            return true
        }
    }

    return flavor
}

def loadDotEnv(flavor = getCurrentFlavor()) {
    def envFile = ".env"
    def envFiles = [".env"]

    if (System.env['ENVFILE']) {
        envFiles.add(System.env['ENVFILE'])
    } else if (System.getProperty('ENVFILE')) {
        envFiles.add(System.getProperty('ENVFILE'))
    } else if (project.hasProperty("envConfigFiles")) {
        project.ext.envConfigFiles.any { pair ->
            if (flavor.startsWith(pair.key)) {
                envFiles.add(pair.value)
                return true
            }
        }
    } else if (project.hasProperty("defaultEnvFile")) {
        envFiles.add(project.defaultEnvFile)
    }

    def rootEnv = [:]
    println("Reading env from: $envFile")

    envFiles.each {
        def environmentMap = [:]
        File f = new File("$project.rootDir/../${it}");
        if (!f.exists()) {
            f = new File("${it}");
        }

        String fileName = f.getName();
        int i = fileName.lastIndexOf('.')
        String environmentType = ""
        if (i >= 0) {
            environmentType = fileName.substring(i+1)
        } else {
            environmentType = "default"
        }
        if (f.exists()) {
            f.eachLine { line ->
                def matcher = (line =~ /^\s*(?:export\s+|)([\w\d\.\-_]+)\s*=\s*['"]?(.*?)?['"]?\s*$/)
                if (matcher.getCount() == 1 && matcher[0].size() == 3) {
                    environmentMap.put(matcher[0][1], matcher[0][2].replace('"', '\\"'))
                }
            }
        } else {
            println("**************************")
            println("*** Missing .env file ****")
            println("**************************")
        }
        rootEnv.put(environmentType, environmentMap)
    }

    project.ext.set("env", rootEnv)
}

loadDotEnv()

android {
    defaultConfig {
        project.env.each { envKey, envMap ->
            envMap.each { k, v ->
                def key = envKey + "_" + k
                def escaped = v.replaceAll("%", "\\\\u0025")
                buildConfigField "String", key, "\"$v\""
                resValue "string", key, "\"$escaped\""
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (project.hasProperty("envConfigFiles")) {
        project.envConfigFiles.each { envConfigName, envConfigFile ->
            if (task.name.toLowerCase() == "generate"+envConfigName+"buildconfig") {
                task.doFirst() {
                    android.applicationVariants.all { variant ->
                        def variantConfigString = variant.getVariantData().getVariantConfiguration().getFullName()
                        if (envConfigName.contains(variantConfigString.toLowerCase())) {
                            loadDotEnv(envConfigName)
                            project.env.each { envKey, envMap ->
                                envMap.each { k, v ->
                                    def key = envKey + "_" + k
                                    def escaped = v.replaceAll("%","\\\\u0025")
                                    variant.buildConfigField "String", key, "\"$v\""
                                    variant.resValue "string", key, "\"$escaped\""
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

